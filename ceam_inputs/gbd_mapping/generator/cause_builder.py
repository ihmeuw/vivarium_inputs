""""Tools for automatically generating the cause, sequela, and etiology GBD mappings."""
from .util import TAB, TEXTWIDTH, SPACING, to_id
from .data import get_etiology_data, get_sequela_data, get_cause_data


def make_module_docstring():
    out = ''
    out += '"""Mapping of GBD cause like entities.\n\n'
    out += f'This code is automatically generated by /ceam_inputs/gbd_mapping/scripts/cause_builder.py\n'
    out += 'Any manual changes will be lost.\n"""\n'
    return out


def make_imports():
    out = ''
    out += 'from .templates import (Etiology, Etiologies, Sequela, Sequelae, '
    out += 'Cause, Causes, Healthstate, Restrictions,\n'
    out += '                        cid, sid, meid, rid, hid, scalar, UNKNOWN)'
    return out


def make_etiology(name, rid):
    # building inner script
    out = ""
    out += TAB + f"{name}=Etiology(\n"
    out += TAB*2 + f"name='{name}',\n"
    out += TAB*2 + f"gbd_id=rid({rid}),\n"
    out += TAB + "),\n"
    return out


def make_etiologies(etiology_list):
    out = "etiologies = Etiologies(\n"
    for name, rid in etiology_list:
        out += make_etiology(name, rid)
    out += ")"
    return out


def make_sequela(name, sid, mei_id, hs_name, hid):
    hs_name = 'UNKNOWN' if hs_name == 'nan' else f"'{hs_name}'"
    out = ""
    out += TAB + f"'{name}': Sequela(\n"
    out += TAB*2 + f"name='{name}',\n"
    out += TAB*2 + f"gbd_id={to_id(sid, 'sid')},\n"
    out += TAB*2 + f"dismod_id={to_id(mei_id, 'meid')},\n"
    out += TAB*2 + f"healthstate=Healthstate(\n"

    out += TAB*3 + f"name={hs_name},\n"
    out += TAB*3 + f"gbd_id={to_id(hid, 'hid')},\n"
    out += TAB*2 + f"),\n"
    out += TAB + f"),\n"
    return out


def make_sequelae(sequela_list):
    out = "sequelae = Sequelae(**{\n"
    for name, sid, mei_id, hs_name, hid in sequela_list:
        out += make_sequela(name, sid, mei_id, hs_name, hid)
    out += "})"
    return out


def make_cause(name, cid, restrictions, sequelae=None, etiologies=None):
    out = ""
    out += TAB + f"'{name}': Cause(\n"
    out += TAB*2 + f"name='{name}',\n"
    out += TAB*2 + f"gbd_id=cid({cid}),\n"
    out += TAB*2 + f"restrictions=Restrictions(\n"
    for restriction, value in restrictions:
        if isinstance(value, bool):
            out += TAB*3 + f"{restriction}={value},\n"
        else:
            out += TAB * 3 + f"{restriction}=scalar({value}),\n"
    out += TAB*2 + "),\n"

    for entity_name, entity in zip(['sequelae', 'etiologies'], [sequelae, etiologies]):
        if entity:
            field = 2*TAB + f'{entity_name}=('
            offset = len(field)

            out += field
            char_count = offset
            for item in entity:
                item_name = f"{entity_name}.{item}, "

                if char_count == offset:
                    out += item_name
                    char_count += len(item_name)
                elif char_count + len(item_name) > TEXTWIDTH:
                    out += '\n' + ' '*offset + item_name
                    char_count = offset + len(item_name)
                else:
                    out += item_name
                    char_count += len(item_name)
            out += '),\n'

    out += TAB + "),\n"
    return out


def make_causes(causes_list):
    out = "causes = Causes(**{\n"
    for name, cid, restrictions, seq_id, etiol_id in causes_list:
        out += make_cause(name, cid, restrictions, seq_id, etiol_id)
    out += "})"
    return out


def build_cause_mapping():
    etiology_data = get_etiology_data()
    sequela_data = get_sequela_data()
    cause_data = get_cause_data()
    out = ''
    out += make_module_docstring()
    out += make_imports() + SPACING
    out += make_etiologies(etiology_data) + SPACING
    out += make_sequelae(sequela_data) + SPACING
    out += make_causes(cause_data)
    return out


if __name__ == "__main__":
    with open(file="causes.py", mode="w") as f:
        f.write(build_cause_mapping())

