import os


TEXTWIDTH = 120
TAB = '    '

#############################
# General purpose functions #
#############################

def make_class_sig(name, superclass=None, docstring=None):
    out = f'class {name}'
    if superclass:
        out += '({superclass})'
    out += ':\n'
    if docstring:
        out += TAB + f'"""{docstring}"""\n'
    return out


def make_slots(field_list):
    declaration = TAB + '__slots__ = ('
    offset = len(declaration)

    out = declaration
    char_count = offset

    for field in field_list:
        field += ', '
        field_width = len(field) + 2  # +2 for quotes around field name
        if char_count == offset:
            out += f"'{field}'"
            char_count += field_width
        elif char_count + field_width > TEXTWIDTH:
            out += '\n' + ' '*offset + field
            char_count = offset + field_width
        else:
            out += field
            char_count += field_width

    out = out[:-1] + ')\n'

    return out


def make_init(field_dtype_map):
    declaration = TAB + '__init__('
    offset = len(declaration)

    out = declaration + 'self,\n'

    for field_name, data_type in field_dtype_map.items():
        out += ' '*offset + field_name + ': ' + data_type + ',\n'

    out = out[:-1] + '):\n'
    return out


def make_super_call(field_names):
    declaration = 2*TAB + 'super().__init__('
    offset = len(declaration)

    out = declaration
    for field in field_names:
        out += f'{field}={field},\n'
        out += ' '*offset

    out = out[:-offset-2] + ')\n'
    return out


def make_attribute_assignment(field_names):
    offset = 8

    out = ''
    for field in field_names:
        out += ' '*offset + f'self.{field} = {field}\n'
    return out


#########################
# Special use functions #
#########################


def make_module_docstring():
    out = f'"""This code is automatically generated by /ceam_inputs/gbd_mapping/scripts/{__file__}\n\n'
    out += 'Any manual changes will be lost.\n"""'
    return out


def make_imports():
    return 'from typing import Union, Tuple\n'


def make_ids(spacing):
    out = ''
    id_docstring_map = (('meid', 'Modelable Entity ID'),
                        ('rid', 'Risk Factor ID'),
                        ('cid', 'Cause ID'),
                        ('sid', 'Sequela ID'),
                        ('hid', 'Health State ID'),
                        ('scalar', 'Raw Measure Value'))
    for k, v in id_docstring_map:
        out += f'class {k}(int):\n'
        out += TAB + f'"""{v}"""\n'
        out += TAB + 'def __repr__(self):\n'
        out += 2*TAB + f'return "{k}({{:d}}).format(self)"\n'
        out += spacing

    return out


def make_unknown_flag(spacing):
    out = ''
    out += 'class _Unknown:\n'
    out += TAB + '"""Marker for unknown values."""\n'
    out += TAB + 'def __repr__(self):\n'
    out += 2*TAB + 'return "UNKNOWN"\n' + spacing
    out += 2*TAB + 'UNKNOWN = _Unknown()\n' + spacing
    out += 2*'class UnknownEntityError(Exception):\n'
    out += '    """Exception raised when a quantity is requested from ceam_inputs with an `UNKNOWN` id."""\n'
    out += '    pass\n'
    return out


def make_base_record():
    out = ''
    out +=  'class GbdRecord:\n'
    out +=  '    """Base class for entities modeled in the GBD."""\n'
    out +=  '    __slots__ = ()\n\n'
    out +=  '    def __contains__(self, item):\n'
    out +=  '        return item in self.__slots__\n\n'
    out +=  '    def __getitem__(self, item):\n'
    out +=  '        if item in self:\n'
    out +=  '            return getattr(self, item)\n'
    out +=  '        else:\n'
    out +=  '            raise KeyError\n\n'
    out +=  '   def __iter__(self):\n'
    out +=  '       for item in self.__slots__:\n'
    out +=  '           yield getattr(self, item)\n\n'
    out +=  '   def __repr__(self):\n'
    out +=  '       return "{{}}({{}})".format(self.__class__.__name__,\n'
    out += r'                                  ",\n".join(["{{}}={{}}".format(name, self[name])' + '\n'
    out +=  '                                             for name in self.__slots__]))\n'
    return out


if __name__ == '__main__':
    spacing = '\n\n'
    template = ''
    template += make_module_docstring() + spacing
    template += make_imports() + spacing
    template += make_ids(spacing)
    template += make_unknown_flag(spacing) + spacing
    template += make_base_record() + spacing
    with open('templates.py', 'w') as f:
        f.write(template)

