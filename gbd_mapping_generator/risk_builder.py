""""Tools for automatically generating the cause, sequela, and etiology GBD mappings."""
from numbers import Number

import numpy as np

from .util import TAB, TEXTWIDTH, SPACING
from .data import get_risk_data


def make_module_docstring():
    out = ''
    out += '"""Mapping of GBD risk entities.\n\n'
    out += f'This code is automatically generated by /ceam_inputs/gbd_mapping/scripts/risk_builder.py\n'
    out += 'Any manual changes will be lost.\n"""\n'
    return out


def make_imports():
    out = ''
    out += 'from .templates import (Risk, Risks, Levels, Tmred, ExposureParameters, Restrictions,\n'
    out += '                        rid, meid, scalar, UNKNOWN)\n'
    out += 'from .causes import causes'
    return out


def make_risk_factor(name, rid, distribution, restrictions, cause_list,
                     levels=None, tmred=None, exposure_parameters=None):
    out = ""
    out += TAB + f"{name}=Risk(\n"
    out += 2*TAB + f"name='{name}',\n"
    out += 2*TAB + f"gbd_id=rid({rid}),\n"
    distribution = "UNKNOWN" if distribution == 'unknown' else f"'{distribution}'"
    out += 2*TAB + f"distribution={distribution},\n"

    for field_class_name, field in zip(['Restrictions', 'Levels', 'Tmred', 'ExposureParameters'],
                                       [restrictions, levels, tmred, exposure_parameters]):
        field_name = 'exposure_parameters' if field_class_name == 'ExposureParameters' else field_class_name.lower()
        if field and not isinstance(field, str):
            out += 2*TAB + f"{field_name}={field_class_name}(\n"
            for subfield_name, subfield in field:
                if isinstance(subfield, str):
                    out += 3*TAB + f"{subfield_name}='{subfield}',\n"
                elif isinstance(subfield, bool) or not isinstance(subfield, Number):
                    out += 3 * TAB + f"{subfield_name}={subfield},\n"
                elif np.isnan(subfield):
                    out += 3 * TAB + f"{subfield_name}=UNKNOWN,\n"
                else:
                    if subfield_name == 'dismod_id':
                        out += 3 * TAB + f"{subfield_name}=meid({subfield}),\n"
                    else:
                        out += 3 * TAB + f"{subfield_name}=scalar({subfield}),\n"
            out += 2*TAB + '),\n'
        elif field:
            out += 2*TAB + f"{field_name}={field},\n"

    field = 2*TAB + "affected_causes=("
    offset = len(field)

    out += field
    char_count = offset
    for cause in cause_list:
        cause_name = f"causes.{cause}, "

        if char_count == offset:
            out += cause_name
            char_count += len(cause_name)
        elif char_count + len(cause_name) > TEXTWIDTH:
            out += '\n' + ' ' * offset + cause_name
            char_count = offset + len(cause_name)
        else:
            out += cause_name
            char_count += len(cause_name)
    out += '),\n'

    out += TAB + '),\n'
    return out


def make_risk_factors(riskfactor_data):
    out = "risk_factors = Risks(\n"
    for name, rid, distribution, restrictions, cause_list, levels, tmred, exposure_parameters in riskfactor_data:
        out += make_risk_factor(name, rid, distribution, restrictions, cause_list,
                                levels, tmred, exposure_parameters)
    out += ")"
    return out


def build_risk_mapping():
    risk_data = get_risk_data()

    out = ''
    out += make_module_docstring()
    out += make_imports() + SPACING
    out += make_risk_factors(risk_data) + '\n'
    return out


if __name__ == "__main__":
    with open('risks.py', 'w') as f:
        f.write(build_risk_mapping())

